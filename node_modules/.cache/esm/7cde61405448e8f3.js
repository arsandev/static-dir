let copy,generateData,generatePage,objectResult,fs,chalk,rimraf,cliProgress;_544‍.x([["default",()=>progress]]);_544‍.w("../lib/copy",[["default",["copy"],function(v){copy=v}]]);_544‍.w("../lib/data",[["default",["generateData"],function(v){generateData=v}]]);_544‍.w("../lib/page",[["default",["generatePage"],function(v){generatePage=v}]]);_544‍.w("../ext/objectResult",[["default",["objectResult"],function(v){objectResult=v}]]);_544‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_544‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_544‍.w("rimraf",[["default",["rimraf"],function(v){rimraf=v}]]);_544‍.w("cli-progress",[["default",["cliProgress"],function(v){cliProgress=v}]]);








const bar = new cliProgress.SingleBar({
  format: 'Compiling... |' + chalk.yellow('{bar}') + '| {percentage}% || {value}/{total} Chunks'
}, cliProgress.Presets.shades_classic)

const rimrafSync = () => {
  return new Promise ((resolve) => {
    rimraf.sync(global.build_dir)
    resolve()
  })
}

               function progress(src, template="default") {
  src = src.replace(/\//g,"\\")
  rimrafSync().then(() => {
    fs.mkdirSync(global.build_dir)
  })
  console.log()
  _544‍.g.console.log(chalk.yellow(`Starting build static directory with template "${template}"`))
  bar.start(200, 0)
  generateData(src).then((data) => {
    bar.update(50)
    objectResult(data)
    generatePage(template).then(() => {
      bar.update(150)
    })
    copy(src).then(() => {
      bar.update(200)
      bar.stop()
      console.log()
      console.log()
      _544‍.g.console.log(chalk.yellow(`cd "${global.build_dir}"`))
    })
    process.on('uncaughtException', function(err) {
      _544‍.g.console.log(err)
      rimraf.sync(global.build_dir)
      process.exit(1)
    })
  })
}
