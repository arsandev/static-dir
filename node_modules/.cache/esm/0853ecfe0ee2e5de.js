let path,fs,recDir,chalk,splash;_0ee‍.x([["default",()=>_0ee‍anonymous]]);_0ee‍.w("path",[["default",["path"],function(v){path=v}]]);_0ee‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_0ee‍.w("recursive-readdir",[["default",["recDir"],function(v){recDir=v}]]);_0ee‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_0ee‍.w("./splash",[["default",["splash"],function(v){splash=v}]]);





const pathTemplate = __dirname+'/../builder/templates'
const executedDir = process.cwd()
const exit = () => process.exit(1)
const templateList = fs.readdirSync(path.join(pathTemplate))

               function _0ee‍anonymous({ src, template, list }, callback) {
    if (typeof callback !== 'function') throw "Callback must be a function"
    if (src[0]) {
      var args0 = (src[0] === ".") ? "" : src[0]
      if (!fs.existsSync(path.join(executedDir, args0))) return _0ee‍.g.console.log(chalk.yellow(`Error: Directory {${args0}} doesn't exist`)), exit()
    }
    if (list) {
        console.log()
        _0ee‍.g.console.log(chalk.yellow('List of templates: '));
        templateList.forEach(template => {
            _0ee‍.g.console.log('- ' + template)
        })
        exit()
    }

    if (template && !fs.existsSync(pathTemplate + '/' + template)) {
        _0ee‍.g.console.log(chalk.red(`Error: Template ${template} doesn't exist, try another template`, '\n'))
        console.log('See available template :')
        console.log('staticia --list            list of template')
        console.log('or')
        console.log('staticia --help            help')
        exit()
    }

    if (!src[0]) {
      splash()
    }
    else{
      callback(args0, template || undefined)
    }
}
